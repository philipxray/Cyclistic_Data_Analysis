#install and load necessary packages
install.packages("readr")
install.packages("dplyr")
install.packages("tidyverse")
install.packages("geosphere")
library(readr)
library(dplyr)
library(tidyverse)
library(geosphere)



#Rename file for brevity
file.rename(from = "Data Analytics Course/202407-divvy-tripdata.csv", to = "Data Analytics Course/202407-tripdata.csv")

# List files in directory and save it into a new variable 
files <- list.files() 

# View the file's names before renaming
print(files)
list.files("Data Analytics Course")
files <- list.files("Data Analytics Course", 
                    pattern = "divvy-tripdata.csv", 
                    full.names = TRUE)

# Remove "divvy" from the file name for ease of use
new_names <- gsub("divvy-", "", files)

# Rename each file 
# Note  this is all being done before loading data into Rstudio
data.frame(old = files, new = new_names)
file.rename(from = files, to = new_names)


# before loading into directory, we need to identify the current directory
# and then set our workspace to the correct directory

# identify current directory 
getwd()

# Then set it to the correct directory.
# This is done so you dont have to type out or paste the full file path "
# Load Data and assign a shorter name for brevity.
db1 <- read.csv("202508-tripdata.csv")
db2 <- read.csv("202507-tripdata.csv")
db3 <-read.csv("202506-tripdata.csv")
db4 <-read.csv("202505-tripdata.csv")
db5 <-read.csv("202504-tripdata.csv")
db6 <-read.csv("202503-tripdata.csv")
db7 <-read.csv("202502-tripdata.csv")
db8 <-read.csv("202501-tripdata.csv")
db9 <-read.csv("202412-tripdata.csv")
db10 <-read.csv("202411-tripdata.csv")
db11 <-read.csv("202410-tripdata.csv")
db12 <-read.csv("202409-tripdata.csv")



# Create a list/ vector of the files 
db_list <- list(db1, db2, db3, db4, db5, db6, db7, db8, db9, db10, db11, db12)


# apply new names to each file
# List the column names of each file and check to make sure they match. 
lapply(db_list, colnames)


#combine/ bind all files
all_trips <-bind_rows(db_list)

# #remove extra files now that a combine dataframe has been created.
# rm(db1, db2, db3, db4, db5, db6, db7, db8, db9, db10, db11, db12)
 rm(db_list)


# Save the dataframe

write.csv(all_trips, "all_trips.csv", row.names = FALSE)



# # Remove lat and long
# all_trips <- all_trips %>% select(-c(start_lat, start_lng, end_lat, end_lng))


colnames(all_trips)



# Create column based on time of day different time_of_day: Night, Morning, Afternoon, Evening

all_trips <- all_trips %>%
  mutate(hour = hour(started_at),
         time_of_day = case_when(
           hour >= 0  & hour < 6  ~ "Night",
           hour >= 6  & hour < 12 ~ "Morning",
           hour >= 12 & hour < 18 ~ "Afternoon",
           hour >= 18 & hour < 24 ~ "Evening"
         ))



# Create Season and Month column

all_trips_tableau <- all_trips %>%
  mutate(
    month = format(as.POSIXct(started_at), "%m"),   # extract month as numeric string
    month = as.integer(month),                      # convert to integer for comparisons
    season = case_when(
      month %in% c(12, 1, 2)  ~ "Winter",
      month %in% c(3, 4, 5)   ~ "Spring",
      month %in% c(6, 7, 8)   ~ "Summer",
      month %in% c(9, 10, 11) ~ "Fall",
      TRUE ~ NA_character_
    )
  )

# Check to make sure column was created
colnames(all_trips_tableau)

#Clean NA values
sum(is.na(all_trips_tableau))        # total number of NA values
colSums(is.na(all_trips_tableau))    # NA count per column

# Create column for ride_duration
all_trips_tableau <- all_trips_tableau %>%
  mutate(
    ride_length = as.numeric(difftime(ended_at, started_at, units = "mins"))
  ) %>%
  filter(ride_length > 0)

all_trips_tableau <- na.omit(all_trips_tableau)

all_trips_tableau <- distinct(all_trips_tableau)

all_trips_tableau <- all_trips_tableau %>%
  mutate(
    ride_length = as.numeric(difftime(ended_at, started_at, units = "mins"))
  ) %>%
  filter(ride_length > 0)

all_trips_tableau <- all_trips_tableau %>%
  mutate(
    ride_distance_meters = distHaversine(
      cbind(start_lng, start_lat),
      cbind(end_lng, end_lat)
    ),
    ride_distance_km = ride_distance_meters / 1000,           # meters → km
    ride_distance_miles = ride_distance_meters * 0.000621371  # meters → miles
  )

# Make sure weekday exists (for grouping by weekday later)
all_trips_tableau <- all_trips_tableau %>%
  mutate(
    weekday = wday(started_at, label = TRUE, week_start = 1)  # ordered factor Mon-Sun
  )
